#!/bin/env python

# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

DOCUMENTATION = '''
---
module: ipauser
short_description: Add and modify a user in FreeIPA.
author: Jamie Lennox
notes:
  - No attempt is made to handle authentication in this module. This means that
    you will probably want to ensure a valid kerberos ticket before running.
requirements:
  - ipalib
  - six
'''

import six
from ipalib import api, errors

api.bootstrap(context='cli')
api.finalize()
api.Backend.rpcclient.connect()

# A list of the RPC methods in some sort of autogenerated format is available:
# https://git.fedorahosted.org/cgit/freeipa.git/tree/API.txt

# We convert the RPC parameter names to the cli "pretty" names in the same way
# that the CLI does based on the cli= param in the above API.txt doc
RPC_TO_CLI = {
    u'givenname': u'first',
    u'sn': u'last',
}

CLI_TO_RPC = {v: k for k, v in six.iteritems(RPC_TO_CLI)}


from ansible.module_utils.basic import *  # noqa

module = AnsibleModule(
    argument_spec=dict(
        uid=dict(required=True),
        first=dict(),
        last=dict(),
    )
)


def main():
    def _param(p):
        v = module.params[p]

        if isinstance(v, six.binary_type):
            v = v.decode('utf-8')

        return v

    uid = _param('uid')

    cli_params = {k: _param(k) for k in CLI_TO_RPC if module.params[k]}
    rpc_params = {CLI_TO_RPC[k]: v for k, v in six.iteritems(cli_params) if v}

    resp = api.Command['user_find'](uid=uid, all=True)

    if resp['result']:
        update_params = {k: v
                         for k, v in six.iteritems(rpc_params)
                         if v != resp['result'][0].get(k, (None,))[0]}

        if update_params:
            if not module.check_mode:
                api.Command['user_mod'](uid, **update_params)

            module.exit_json(changed=True)
        else:
            module.exit_json(changed=False)

    else:
        if not module.check_mode:
            api.Command['user_add'](uid, **rpc_params)

        module.exit_json(changed=True)


if __name__ == '__main__':
    try:
        main()
    except errors.PublicError as e:
        module.fail_json(msg=e.msg)

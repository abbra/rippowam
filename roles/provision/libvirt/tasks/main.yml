---
- name: install libguestfs-tools-c
  package:
    name: "{{ item }}"
    state: present
  with_items: 
    - libguestfs-tools-c
    - libselinux-python

- name: push base vm image to hypervisor
  copy:
    src:  "{{ source_image_dir }}/{{ source_image_file }}"
    dest: "{{ target_image_dir }}/{{ source_image_file }}"
    owner: qemu
    group: qemu
    mode: u=rw,g=r,o=r

- name: push pubkey to hypervisor
  copy:
    src:  "{{ source_keystore_dir }}/{{ source_pubkey_file }}"
    dest: "{{ hypervisor_keystore_dir }}/{{ target_pubkey_file }}"
    owner: qemu
    group: qemu
    mode: u=rw,g=r,o=r

- template:
    src: "ifcfg-eth{{ item }}.j2"
    dest: '{{ hypervisor_keystore_dir }}/ifcfg-eth{{ item }}'
  with_items:
  - 1
  - 2

- name: create vm backing store from base vm image
  copy: remote_src=True
    src="{{ target_image_dir }}/{{ source_image_file }}"
    dest="{{ target_image_dir }}/{{ item.name }}.qcow2"
    force=no  # Do not recopy if it has been modified
  with_items: "{{ cluster_hosts }}"

- name: Ensure the backing store is large enough
  command: qemu-img resize "{{ target_image_dir }}/{{ item.name }}.qcow2"  30G
  with_items: "{{ cluster_hosts }}"

- name: Grow the partition
  command: "virt-resize  --expand /dev/sda1 {{ target_image_dir }}/{{ source_image_file }} {{ target_image_dir }}/{{ item.name }}.qcow2"
  with_items: "{{ cluster_hosts }}"


- name: add cloud-user and keys
  command:  virt-customize -a {{ target_image_dir }}/{{ item.name }}.qcow2 --run-command  'id -u cloud-user &>/dev/null || /usr/sbin/useradd -u 1000 cloud-user'  --ssh-inject cloud-user:file:/tmp/authorized_keys   --hostname {{ item.name }}.{{ cluster_domain }}  --copy-in {{ hypervisor_keystore_dir }}/ifcfg-eth1:/etc/sysconfig/network-scripts --copy-in {{ hypervisor_keystore_dir }}/ifcfg-eth2:/etc/sysconfig/network-scripts  --selinux-relabel --root-password password:FreeIPA4All
  with_items: "{{ cluster_hosts }}"


- name: define vm
  virt:
      name: "{{ item.name }}"
      command: define
      xml: "{{ lookup('template', 'vm.xml.j2') }}"
      uri:  qemu:///session
  with_items: "{{ cluster_hosts }}"

- name: define macvtap networks
  virt_net:
    command: define
    name: "macvtap-{{ item.cluster_host }}-{{ item.device }}"
    xml: '{{ lookup("template", "macvtap.xml.j2") }}'
  with_items: "{{ macvtap_networks }}"

- name: define macvtap networks
  virt_net:
    name: "macvtap-{{ item.cluster_host }}-{{ item.device }}"
    autostart: yes
  with_items: "{{ macvtap_networks }}"


- name: start macvtap networks
  virt_net:
    name: "macvtap-{{ item.cluster_host }}-{{ item.device }}"
    state: active
    autostart: yes
    xml: '{{ lookup("template", "macvtap.xml.j2") }}'
  with_items: "{{ macvtap_networks }}"


- name: run vm
  virt:
      name: "{{ item.name }}"
      uri:  qemu:///session
      state: running
  with_items: "{{ cluster_hosts }}"

- name:  add macvtap interfaces
  command: virsh --connect  qemu:///session  attach-interface   \
    --domain {{ item.cluster_host }}.home.younglogic.net \
    --type network   \
    --source macvtap-{{ item.cluster_host }}-{{ item.device }}  \
    --model virtio   --config --live
  with_items: "{{ macvtap_networks }}"



- name: reset ssh keys for hostname
  become: no
  local_action: 
    module: command ssh-keygen -R  {{ item.name }} 
  with_items: "{{ cluster_hosts }}"

- name: reset ssh keys for FQDN
  become: no
  local_action: 
    module: command ssh-keygen -R  {{ item.name }}.{{ cluster_domain }} 
  with_items: "{{ cluster_hosts }}"


- name: reset ssh keys for ip address
  become: no
  local_action: 
    module: command ssh-keygen -R  {{ static_ip_address }}
